import { jsPDF } from 'jspdf';
import { generateSerialNumber, BRANCH_PREFIXES } from './pdfUtils';
import autoTable from 'jspdf-autotable';

// Define the Patient interface
interface Patient {
  id: string;
  name: string;
  gender: string;
  age?: number;
  dateOfBirth?: string;
  phone?: string;
  email?: string;
  status: 'active' | 'inactive' | 'admitted' | 'discharged' | 'pending';
  lastVisit?: string;
  address?: string;
  insuranceProvider?: string;
  insuranceNumber?: string;
}

// Define export options interface
interface ExportOptions {
  title?: string;
  branchId: string;
  branchName: string;
  userName: string;
  filterDescription?: string;
  includeHeader?: boolean;
  includeFooter?: boolean;
  includeNotes?: boolean;
  logoUrl?: string;
  headerColor?: string;
  accentColor?: string;
  fontFamily?: string;
  showPageNumbers?: boolean;
  showSerialNumber?: boolean;
  customNotes?: string;
}

/**
 * Generate a PDF patient register
 * @param patients Array of patients to include in the register
 * @param options Export options
 * @returns jsPDF document
 */
export const generatePatientRegisterPDF = (
  patients: Patient[],
  options: ExportOptions
): jsPDF => {
  // Create a new PDF document
  const doc = new jsPDF();

  // Set default options
  const {
    title = 'Patient Register',
    branchId,
    branchName,
    userName,
    filterDescription = 'All Patients',
    includeHeader = true,
    includeFooter = true,
    includeNotes = true,
    logoUrl = '/bristol-logo.png',
    headerColor = '#2B3990',
    accentColor = '#A61F1F',
    fontFamily = 'helvetica',
    showPageNumbers = true,
    showSerialNumber = true,
    customNotes = ''
  } = options;

  // Set font
  doc.setFont(fontFamily);

  // Generate a serial number
  const serialNumber = showSerialNumber
    ? generateSerialNumber(branchId, 'REG')
    : '';

  // Get page dimensions
  const pageWidth = doc.internal.pageSize.width;
  const pageHeight = doc.internal.pageSize.height;

  // Add header if enabled
  if (includeHeader) {
    // Add header background
    doc.setFillColor(parseInt(headerColor.substring(1, 3), 16), parseInt(headerColor.substring(3, 5), 16), parseInt(headerColor.substring(5, 7), 16));
    doc.rect(0, 0, pageWidth, 30, 'F');

    // Add logo
    try {
      doc.addImage(
        logoUrl,
        'AUTO',
        14, 5,
        20, 20
      );
    } catch (error) {
      console.error('Error adding logo to PDF:', error);

      // Fallback to a colored rectangle if image loading fails
      doc.setDrawColor(255, 255, 255);
      doc.setFillColor(255, 255, 255);
      doc.circle(20, 15, 10, 'F');
    }

    // Add header text
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(16);
    doc.text('BRISTOL PARK HOSPITAL', 45, 15);
    doc.setFontSize(12);
    doc.text('Patient Register', 45, 22);

    // Add document title
    doc.setFillColor(240, 240, 240);
    doc.rect(0, 30, pageWidth, 15, 'F');

    doc.setTextColor(parseInt(headerColor.substring(1, 3), 16), parseInt(headerColor.substring(3, 5), 16), parseInt(headerColor.substring(5, 7), 16));
    doc.setFontSize(14);
    doc.text(title.toUpperCase(), 14, 40);

    // Add serial number if enabled
    if (showSerialNumber) {
      doc.setFontSize(10);
      doc.text(serialNumber, pageWidth - 14, 40, { align: 'right' });
    }
  }

  // Add report information
  const startY = includeHeader ? 55 : 20;

  doc.setTextColor(parseInt(headerColor.substring(1, 3), 16), parseInt(headerColor.substring(3, 5), 16), parseInt(headerColor.substring(5, 7), 16));
  doc.setFontSize(12);
  doc.text('Report Information', 14, startY);

  doc.setDrawColor(parseInt(headerColor.substring(1, 3), 16), parseInt(headerColor.substring(3, 5), 16), parseInt(headerColor.substring(5, 7), 16));
  doc.setLineWidth(0.5);
  doc.line(14, startY + 2, pageWidth - 14, startY + 2);

  // Add report details
  doc.setTextColor(0, 0, 0);
  doc.setFontSize(10);

  // Left column
  doc.setFont(fontFamily, 'bold');
  doc.text('Branch:', 14, startY + 10);
  doc.text('Generated By:', 14, startY + 18);
  doc.text('Filter:', 14, startY + 26);

  doc.setFont(fontFamily, 'normal');
  doc.text(branchName, 50, startY + 10);
  doc.text(userName, 50, startY + 18);
  doc.text(filterDescription, 50, startY + 26);

  // Right column
  doc.setFont(fontFamily, 'bold');
  doc.text('Generated On:', pageWidth / 2, startY + 10);
  doc.text('Total Patients:', pageWidth / 2, startY + 18);

  doc.setFont(fontFamily, 'normal');
  doc.text(new Date().toLocaleDateString(), pageWidth / 2 + 36, startY + 10);
  doc.text(patients.length.toString(), pageWidth / 2 + 36, startY + 18);

  // Add patient list title
  const tableStartY = startY + 36;

  doc.setTextColor(parseInt(headerColor.substring(1, 3), 16), parseInt(headerColor.substring(3, 5), 16), parseInt(headerColor.substring(5, 7), 16));
  doc.setFontSize(12);
  doc.text('Patient List', 14, tableStartY);

  doc.setDrawColor(parseInt(headerColor.substring(1, 3), 16), parseInt(headerColor.substring(3, 5), 16), parseInt(headerColor.substring(5, 7), 16));
  doc.setLineWidth(0.5);
  doc.line(14, tableStartY + 2, pageWidth - 14, tableStartY + 2);

  // Prepare table data
  const tableHeaders = [
    { header: 'Patient ID', dataKey: 'id' },
    { header: 'Name', dataKey: 'name' },
    { header: 'Gender', dataKey: 'gender' },
    { header: 'Age', dataKey: 'age' },
    { header: 'Phone', dataKey: 'phone' },
    { header: 'Status', dataKey: 'status' },
    { header: 'Last Visit', dataKey: 'lastVisit' }
  ];

  const tableData = patients.map(patient => ({
    id: patient.id,
    name: patient.name,
    gender: patient.gender,
    age: patient.age?.toString() || '',
    phone: patient.phone || '',
    status: patient.status.charAt(0).toUpperCase() + patient.status.slice(1),
    lastVisit: patient.lastVisit || ''
  }));

  // Add the table using the imported autoTable function
  autoTable(doc, {
    startY: tableStartY + 6,
    head: [tableHeaders.map(header => header.header)],
    body: tableData.map(row => tableHeaders.map(header => row[header.dataKey as keyof typeof row])),
    margin: { top: 10, right: 14, bottom: 60, left: 14 },
    headStyles: {
      fillColor: [230, 230, 230],
      textColor: [50, 50, 50],
      fontStyle: 'bold',
      halign: 'left'
    },
    alternateRowStyles: {
      fillColor: [249, 249, 249]
    },
    styles: {
      font: fontFamily,
      fontSize: 10
    }
  });

  // Get the final Y position after the table
  const finalY = (doc as any).lastAutoTable?.finalY + 10 || tableStartY + 50;

  // Add notes if enabled
  if (includeNotes) {
    const notesText = customNotes ||
      `This report includes ${patients.length} patients from the ${branchName} branch. ` +
      'For a complete list or detailed patient information, please access the patient management system.';

    doc.setTextColor(parseInt(headerColor.substring(1, 3), 16), parseInt(headerColor.substring(3, 5), 16), parseInt(headerColor.substring(5, 7), 16));
    doc.setFontSize(12);
    doc.text('Notes', 14, finalY);

    doc.setDrawColor(parseInt(headerColor.substring(1, 3), 16), parseInt(headerColor.substring(3, 5), 16), parseInt(headerColor.substring(5, 7), 16));
    doc.setLineWidth(0.5);
    doc.line(14, finalY + 2, pageWidth - 14, finalY + 2);

    doc.setTextColor(0, 0, 0);
    doc.setFontSize(10);

    // Split long text into multiple lines
    const textLines = doc.splitTextToSize(notesText, pageWidth - 28);
    doc.text(textLines, 14, finalY + 10);
  }

  // Add footer if enabled
  if (includeFooter) {
    // Add colored lines in footer
    // Blue line
    doc.setDrawColor(parseInt(headerColor.substring(1, 3), 16), parseInt(headerColor.substring(3, 5), 16), parseInt(headerColor.substring(5, 7), 16));
    doc.setLineWidth(1.5);
    doc.line(0, pageHeight - 20, pageWidth, pageHeight - 20);

    // Red line (thinner)
    doc.setDrawColor(parseInt(accentColor.substring(1, 3), 16), parseInt(accentColor.substring(3, 5), 16), parseInt(accentColor.substring(5, 7), 16));
    doc.setLineWidth(0.75);
    doc.line(0, pageHeight - 18, pageWidth, pageHeight - 18);

    // Add footer text
    doc.setFillColor(240, 240, 240);
    doc.rect(0, pageHeight - 18, pageWidth, 18, 'F');

    doc.setTextColor(100, 100, 100);
    doc.setFontSize(8);
    doc.text('Bristol Park Hospital - Excellence in Healthcare', 14, pageHeight - 8);

    // Add page number if enabled
    if (showPageNumbers) {
      doc.text('Page 1 of 1', pageWidth - 14, pageHeight - 8, { align: 'right' });
    }

    // Add serial number in footer if enabled
    if (showSerialNumber) {
      doc.text(serialNumber, 14, pageHeight - 4);
    }
  }

  return doc;
};

/**
 * Export patients to Excel format
 * This is a placeholder function - in a real implementation, you would use a library like xlsx
 */
export const exportPatientsToExcel = (
  patients: Patient[],
  options: Partial<ExportOptions> = {}
): void => {
  console.log('Exporting patients to Excel:', patients, options);
  // Implementation would use xlsx or similar library
};

/**
 * Export patients to CSV format
 */
export const exportPatientsToCSV = (
  patients: Patient[],
  options: Partial<ExportOptions> = {}
): string => {
  // Define CSV headers
  const headers = ['Patient ID', 'Name', 'Gender', 'Age', 'Phone', 'Email', 'Status', 'Last Visit'];

  // Convert patients to CSV rows
  const rows = patients.map(patient => [
    patient.id,
    patient.name,
    patient.gender,
    patient.age?.toString() || '',
    patient.phone || '',
    patient.email || '',
    patient.status,
    patient.lastVisit || ''
  ]);

  // Combine headers and rows
  const csvContent = [
    headers.join(','),
    ...rows.map(row => row.join(','))
  ].join('\n');

  return csvContent;
};
